# -*- coding: utf-8 -*-
"""CursoDePython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GCyczrPmnTKcWg-_u2lfCIvcg7DFhDpX

## LECTURA Y LIMPIEZA DE DATOS
"""

import pandas as pd

data = pd.read_csv('NFL Play by Play 2009-2016 (v3).csv', ',')

data

cuantos_nans = data.isnull().sum()

n_rows = data.shape[0]
n_columns = data.shape[1]

p70 = n_rows*0.70

print(data.shape[1])

data = data.dropna(axis=1,thresh=p70)

print(data.shape[1])

data

p70r = n_columns*0.70

print(data.shape[0])

data = data.dropna(axis=0,thresh=p70r)

print(data.shape[0])

data = data.fillna(method = 'bfill') #también podrían usar data.interpolate()

data.isnull().sum().sum()

"""## BALANCEO Y AJUSTE DE TIPO DE DATOS"""

import pandas as pd

data = pd.read_csv('data.csv', ',')

data

cuantos_nans = data.isnull().sum()

n_rows = data.shape[0]
n_columns = data.shape[1]

p70 = n_rows*0.70

print(data.shape[1])

data = data.dropna(axis=1,thresh=p70)

print(data.shape[1])

data

p70r = n_columns*0.70

print(data.shape[0])

data = data.dropna(axis=0,thresh=p70r)

print(data.shape[0])

data = data.fillna(method = 'bfill') #también podrían usar data.interpolate()

data.isnull().sum().sum()

for i in range(n_rows):
  if data.loc[i,'diagnosis'] =='M':
    data.loc[i,'diagnosis'] = 1
  else:
      data.loc[i,'diagnosis'] = 0

data

data.loc[:,'diagnosis'].sum()/n_rows*100

data = data.drop(columns=['id'])

data

"""## ESCALAR Y DIVIDIR DATOS DE ENTRENAMIENTO Y TESTEO"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

data = scaler.fit_transform(data)

dataframe= pd.DataFrame(data)

dataframe

X = dataframe.loc[:,1:n_columns]
y = dataframe.loc[:,0]

x_train, x_test, y_train, y_test = train_test_split(X,y)

"""## MODELO JUGUETE"""

from sklearn.linear_model import LogisticRegression
import sklearn.metrics as metrics

metodo = LogisticRegression()

model = metodo.fit(x_train,y_train)

prediction = model.predict(x_test)

fpr, tpr, threshold = metrics.roc_curve(y_test,prediction)

roc_auc = metrics.auc(fpr, tpr)

print(roc_auc)

from sklearn.neighbors import KNeighborsClassifier
import sklearn.metrics as metrics

metodo = KNeighborsClassifier()

model = metodo.fit(x_train,y_train)

prediction = model.predict(x_test)

fpr, tpr, threshold = metrics.roc_curve(y_test,prediction)

roc_auc = metrics.auc(fpr, tpr)

print(roc_auc)

